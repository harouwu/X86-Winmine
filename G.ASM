TUITUI MACRO
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
ENDM

LALA MACRO
	POP DX
	POP CX
	POP BX
	POP AX
ENDM

CLEAR_SCREEN MACRO 
	TUITUI
	MOV CX,0
	MOV DH,24
	MOV DL,79
	MOV AH,06H ;从0 行0 列至24 行79 列
	MOV AL,00H
	INT 10H
	LALA
ENDM

DRAW_PIXEL MACRO X_CO, Y_CO, COL
	TUITUI
	MOV DX,Y_CO ;纵坐标
	MOV CX,X_CO ;横坐标
	MOV BH,0 ;显示页
	MOV AH,0CH
	MOV AL,COL ;选择颜色，可选颜色为：0－F
	INT 10H
	LALA
ENDM

DRAW_HL MACRO X_S, X_E, Y_S, Y_E, COL
	TUITUI
	MOV AX, X_S
	MOV BX, X_E
	MOV DX, Y_S
DHLL:
	DRAW_PIXEL AX, DX, COL
	INC AX
	CMP AX, BX
	JG DHLE
	JMP DHLL
DHLE:
	LALA
ENDM

DRAW_VL MACRO X_S, X_E, Y_S, Y_E, COL
	TUITUI
	MOV AX, X_S
	MOV BX, Y_S
	MOV DX, Y_E
DVLL:
	DRAW_PIXEL AX, BX, COL
	INC BX
	CMP BX, DX
	JG DVLE
	JMP DVLL
DVLE:
	LALA
ENDM

DRAW_SQR MACRO X_S, X_E, Y_S, Y_E, COL
	TUITUI
	MOV AX, X_S
	MOV BX, X_E
	MOV CX, Y_S
	MOV DX, Y_E
DSQL:
	DRAW_VL AX, BX, CX, DX, COL
	INC AX
	CMP AX, BX
	JG DSQE
	JMP DSQL
DSQE:
	LALA
ENDM

FUZHI MACRO
	MOV XSC, AX
	MOV XEC, BX
	MOV YSC, DX
	MOV YEC, CX
ENDM

PREPARE_XY MACRO
	MOV AX, [SI]
	MOV XSC, AX
	INC SI
	INC SI
	MOV AX, [SI]
	MOV XEC, AX
	INC SI
	INC SI
	MOV AX, [SI]
	MOV YSC, AX
	INC SI
	INC SI
	MOV AX, [SI]
	MOV YEC, AX
	INC SI
	INC SI
ENDM

STACK SEGMENT PARA STACK
	DW 0F00H DUP(0)
STACK ENDS
DATA SEGMENT
	ROUNDMINENUM DB 256 DUP(0);周边地雷数
	ISMINE DB 256 DUP(0);地雷标志
	
	STATE DB 256 DUP(0);状态,1为打开,2为设置旗帜
	GAMESTATE DB 0;游戏状态,0为游戏中,1为GAMEOVER,2为胜利
	
	RANDDATA DB 0;存放生成的随机数
	POSTEMP DB 0;存放输入的位置

	BFSI DB 0
	BFSN DB 0
	BFS_ARRAY DB 256 DUP(0) ;

	
	;以下为各类提示信息
	MESSHINT DB 0AH,0DH,'USE K0-K3 TO INPUT ROW, USE K4-K7 TO INPUT COLUMN'
			DB 0AH,0DH,'INPUT H TO HELP, INPUT Q TO EXIT','$'
	MESSMINE DB 0AH,0DH,'MINE:','$'
	MESSERROR1 DB 'INPUT ERROR!',0AH,0DH,'$'
	MESSOVER DB 0AH,0DH,'GAMEOVER!',0AH,0DH,'$'
	MESSRETURN DB 'PRESS ANY KEY TO EXIT',0AH,0DH,'$'
	MESSWIN DB 'YOU WIN!',0AH,0DH,'TIME:','$'
	MESSWATCH DB 'PRESS ANY KEY TO WATCH MAP',0AH,0DH,'$'
    TAGHANG DB 0AH,0DH,'  0 1 2 3 4 5 6 7 8 9',0AH,0DH,'$'

    LEFTMINE DB 10;剩余的雷数(剩余的可用旗帜数)

    TIME3 DB 0;记录时间,百位
	TIME2 DB 0;记录时间,十位
	TIME1 DB 0;记录时间,各位
	ENDTIME3 DB 0;记录最终时间,百位
	ENDTIME2 DB 0;记录最终时间,百位
	ENDTIME1 DB 0;记录最终时间,百位
    ;音乐
	MUS_FREQ DW 262,350,350,350,330,294,330,262,196,165,-1
	MUS_TIME DW 25,50,25,25,25,25,25,50,25,25

	;随机数表
        RANDTABLE DB 32,04,46,90,37,29,65,59,21,14,81,03,44,05,82,01
DB 58,47,71,84,85,76,24,65,05,53,63,31,53,71,09,74
					DB 23,82,19,60,70,82,59,38,16,42,08,97,10,74,41,09
DB 03,78,15,30,56,19,59,54,25,21,53,36,48,27,08,41
					DB 82,38,39,49,87,66,44,12,86,77,95,96,17,83,46,37
DB 91,60,94,16,42,43,84,84,32,16,74,45,91,82,05,14
					DB 68,31,02,17,92,71,63,58,60,89,38,15,79,56,20,96
DB 71,87,95,54,50,20,91,77,05,29,75,50,20,90,16,28
					DB 94,85,67,69,40,22,16,50,14,14,01,41,33,72,31,05
DB 50,93,74,89,56,45,95,29,83,96,40,95,97,79,99,45
					DB 95,00,06,19,58,83,43,09,82,50,70,03,00,54,36,74
DB 81,44,59,78,09,27,71,38,27,52,95,37,15,40,51,02
					DB 20,76,46,46,38,11,35,93,25,56,89,82,20,27,13,81
DB 29,35,29,70,25,08,03,35,55,90,26,23,17,20,89,09
					DB 71,40,11,79,64,50,94,09,57,53,34,90,59,35,66,36
DB 31,0,87,95,30,51,10,52,69,52,54,10,54,82,21,44,78
	MSG DB 256 DUP(0)
	X_S_T DW 0
	X_E_T DW 0
	Y_S_T DW 0
	Y_E_T DW 0
	TEMP DB 0
	XSC DW 0
	XEC DW 0
	YSC DW 0
	YEC DW 0
	COLT DB 0
	COTABLE DW 	128, 163, 48, 83, 167, 202, 48, 83, 206, 241, 48, 83, 245, 280, 48, 83, 284, 319, 48, 83, 323, 358, 48
			DW	83, 362, 397, 48, 83, 401, 436, 48, 83, 440, 475, 48, 83, 479, 514, 48, 83
			DW	128, 163, 87, 122, 167, 202, 87, 122, 206, 241, 87, 122, 245, 280, 87, 122, 284, 319, 87, 122, 323, 358
			DW	 87, 122, 362, 397, 87, 122, 401, 436, 87, 122, 440, 475, 87, 122, 479, 514, 87, 122
			DW	128, 163, 126, 161, 167, 202, 126, 161, 206, 241, 126, 161, 245, 280, 126, 161, 284, 319, 126, 161, 323
			DW	 358, 126, 161, 362, 397, 126, 161, 401, 436, 126, 161, 440, 475, 126, 161, 479, 514, 126, 161
			DW	128, 163, 165, 200, 167, 202, 165, 200, 206, 241, 165, 200, 245, 280, 165, 200, 284, 319, 165, 200, 323
			DW	 358, 165, 200, 362, 397, 165, 200, 401, 436, 165, 200, 440, 475, 165, 200, 479, 514, 165, 200
			DW	128, 163, 204, 239, 167, 202, 204, 239, 206, 241, 204, 239, 245, 280, 204, 239, 284, 319, 204, 239, 323
			DW	 358, 204, 239, 362, 397, 204, 239, 401, 436, 204, 239, 440, 475, 204, 239, 479, 514, 204, 239
			DW	128, 163, 243, 278, 167, 202, 243, 278, 206, 241, 243, 278, 245, 280, 243, 278, 284, 319, 243, 278, 323
			DW	 358, 243, 278, 362, 397, 243, 278, 401, 436, 243, 278, 440, 475, 243, 278, 479, 514, 243, 278
			DW	128, 163, 282, 317, 167, 202, 282, 317, 206, 241, 282, 317, 245, 280, 282, 317, 284, 319, 282, 317, 323
			DW	 358, 282, 317, 362, 397, 282, 317, 401, 436, 282, 317, 440, 475, 282, 317, 479, 514, 282, 317
			DW	128, 163, 321, 356, 167, 202, 321, 356, 206, 241, 321, 356, 245, 280, 321, 356, 284, 319, 321, 356, 323
			DW	 358, 321, 356, 362, 397, 321, 356, 401, 436, 321, 356, 440, 475, 321, 356, 479, 514, 321, 356
			DW	128, 163, 360, 395, 167, 202, 360, 395, 206, 241, 360, 395, 245, 280, 360, 395, 284, 319, 360, 395, 323
			DW	 358, 360, 395, 362, 397, 360, 395, 401, 436, 360, 395, 440, 475, 360, 395, 479, 514, 360, 395
			DW	128, 163, 399, 434, 167, 202, 399, 434, 206, 241, 399, 434, 245, 280, 399, 434, 284, 319, 399, 434, 323
			DW	 358, 399, 434, 362, 397, 399, 434, 401, 436, 399, 434, 440, 475, 399, 434, 479, 514, 399, 434
	WELCOME DB	'	 ================================================= ',0DH,0AH
			DB	'	||                                             	 ||',0DH,0AH
			DB	'	||           ]  Welcome to SaoLei  [             ||',0DH,0AH
			DB	'	||                 By  Yiming Wu                 ||',0DH,0AH
			DB	'	||                  1100012807                   ||',0DH,0AH
			DB	'	||                                             	 ||',0DH,0AH
			DB	'	||~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~||',0DH,0AH
			DB	'	||                                             	 ||',0DH,0AH
			DB	'	||           Press ANY BUTTON to Start!        	 ||',0DH,0AH
			DB	'	||   	  [10 * 10 Map with 10 Bomb at all!]  	 ||',0DH,0AH
			DB	'	||                                             	 ||',0DH,0AH
			DB	'	||~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~||',0DH,0AH
			DB	'	||                                             	 ||',0DH,0AH
			DB	'	||                Press Esc to Quit 	         ||',0DH,0AH
			DB	'	||                                             	 ||',0DH,0AH
			DB	'	 ================================================= ',0DH,0AH
			DB 0DH, 0AH, '$'

	XSCO DW 128
	YSCO DW 48


DATA ENDS
CODE SEGMENT
	ASSUME CS:CODE, SS:STACK, DS:DATA
START:
	MOV AX, DATA
	MOV DS, AX

	CALL WELCOME_SCREEN

	MOV CX,10
	SETMINELOOP1:
		CALL RAND;调用随机过程生成随机数
		MOV DL,RANDDATA
		MOV DH,0
		MOV DI,OFFSET ISMINE
		ADD DI, DX
		CMP BYTE PTR [DI],1H
		JZ SETMINELOOP1;	
		MOV BYTE PTR [DI],1H;设置地雷
		CALL SETMINENUM;
	LOOP SETMINELOOP1

	MOV AH,00H
	MOV AL,12H ;VGA 640X480 16 色
	INT 10H
	CLEAR_SCREEN
	CALL DRAW_MY_MAP	
	
	; HERE ENDS THE MAP DRAWING
SLOOP:
	CALL GET_KEY_BOARD
	CALL ISWIN
	CMP GAMESTATE, 0
	JG SAOLEI_END
	JMP SLOOP

SAOLEI_END:	
	MOV AH, 4CH
	INT 21H

DRAW_A_SQR PROC NEAR
	DRAW_SQR XSC, XEC, YSC, YEC, COLT
	RET
DRAW_A_SQR ENDP

DRAW_A_FALG PROC NEAR
	MOV COLT, 0FH
	ADD XSC, 16
	SUB XEC, 17
	ADD YSC, 5
	SUB YEC, 7
	CALL DRAW_A_SQR
	SUB XSC, 10
	ADD XEC, 12
	ADD YSC, 23
	ADD YEC, 3
	CALL DRAW_A_SQR
	ADD XSC, 14
	SUB XEC, 4
	SUB YSC, 20
	SUB YEC, 15
	CALL DRAW_A_SQR
	RET
DRAW_A_FALG ENDP


DRAW_MY_MAP PROC NEAR
	TUITUI
	PUSH SI
	PUSH DI
	MOV AX, DATA
	MOV DS, AX
	MOV TEMP, 0
	MOV SI, OFFSET COTABLE
	MOV DI, OFFSET ROUNDMINENUM
	MOV BX, OFFSET ISMINE
DMML:
	PREPARE_XY
	MOV COLT, 0CH
	CALL DRAW_A_SQR
	CMP BYTE PTR [BX], 0
	JMP DMML3
	JZ DMML0
	CALL DRAW_A_BOMB
	JMP DMML3
DMML0:
	CMP BYTE PTR [DI], 0
	JG DMML1
	CALL DRAW_A_ZERO
	JMP DMML3
DMML1:
	CMP BYTE PTR [DI], 1
	JG DMML2
	CALL DRAW_A_ONE
	JMP DMML3
DMML2:
	CALL DRAW_A_TWO
DMML3:
	INC DI
	INC BX
	INC TEMP
	CMP TEMP, 100
	JGE DMME
	JMP DMML
DMME:
	POP DI
	POP SI
	LALA
	RET
DRAW_MY_MAP ENDP

GET_KEY_BOARD PROC NEAR
	TUITUI
	MOV CX, 0
	MOV SI, OFFSET MSG
MLOOP:
  	MOV AH, 1
  	INT 16H       ;读键盘缓冲区字符
	JZ MLOOP
  	MOV AH, 0
  	INT 16H
  	CMP AL, 27   ;读入ESC时返回DOS
  	JNZ MLOOP1
  	JMP GKEXIT
MLOOP1:
  	MOV BL, AL
  	MOV AH, 2
  	MOV DL, AL
  	INT 21H
 	MOV AL, BL
  	SUB AL, '0'
  	MOV BYTE PTR [SI], AL
  	INC SI
  	INC CX
  	CMP CX, 3
  	JL MLOOP
  	MOV TEMP, 0
  	DEC SI
  	MOV AL, BYTE PTR [SI]
  	MOV CL, 10
  	MUL CL
  	DEC SI
  	ADD AL, BYTE PTR [SI]
  	MOV TEMP, AL ;XIABIAO CUN ZAI BH LI
  	MOV CL, 8
  	MUL CL
  	DEC SI
  	MOV BL, BYTE PTR [SI]
  	MOV BH, 0
  	MOV DX, OFFSET COTABLE
  	ADD DX, AX
  	MOV SI, DX
  	PREPARE_XY
  	CMP BL, 1
  	JZ GKB_CHAQIZI
  	CALL FLIP_A_PIECE
  	JMP GKB_RET
GKB_CHAQIZI:
	MOV COLT, 0CH
	CALL DRAW_A_SQR 
	CALL DRAW_A_FALG
	MOV DI, OFFSET STATE
	ADD DI, BX
	MOV BYTE PTR [DI], 2
	MOV DI, OFFSET ISMINE
	ADD DI, BX
	CMP BYTE PTR [DI], 0
	JZ GKB_RET
	DEC LEFTMINE
GKB_RET:
	LALA
	RET
GKEXIT:
	JMP SAOLEI_END
GET_KEY_BOARD ENDP

;=============================================================		
;			过程:RNAD
;			用途:利用随机数表生成随机数
;=============================================================		
RAND PROC NEAR
	PUSH CX
	PUSH DX
	PUSH AX
	PUSH BX
	
	MOV AH,00H
	INT 1AH
	MOV AX,DX
	INC AX
				AND AX,0FFH
				MOV DL,240
	DIV DL

	MOV BX, OFFSET RANDTABLE
	ADD BL,AH

	MOV BL,[BX];余数存入BL
	MOV RANDDATA, BL;
	
	POP BX
	POP AX
	POP DX
	POP CX
	RET
RAND ENDP

;=============================================================
;			过程:SETMINENUM
;			用途:计算周边地雷数
;=============================================================
SETMINENUM PROC NEAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	
	MOV DL, RANDDATA
	MOV BX, OFFSET ROUNDMINENUM
	MOV DH, 0
	
	
	CORNER:;处理角落4个点
	CMP DL, 0
	JZ MINE0ROUND;
	CMP DL, 9
	JZ MINE9ROUND;
	CMP DL, 90
	JZ MINE90ROUND
	CMP DL,99
	JZ MINE99ROUND
	
	JMP BORDERUPDOWN
	MINE0ROUND:
		INC BYTE PTR [BX+1]
		INC BYTE PTR [BX+10]
		INC BYTE PTR [BX+11]
	JMP EXITP
	
	MINE9ROUND:
		INC BYTE PTR [BX+8]
		INC BYTE PTR [BX+18]
		INC BYTE PTR [BX+19]
	JMP EXITP
	
	MINE90ROUND:
		INC BYTE PTR [BX+80]
		INC BYTE PTR [BX+81]
		INC BYTE PTR [BX+91]
	JMP EXITP
	
	MINE99ROUND:
		INC BYTE PTR [BX+89]
		INC BYTE PTR [BX+88]
		INC BYTE PTR [BX+98]
	JMP EXITP
	
	;处理上下边沿
	BORDERUPDOWN:
	CMP DL, 9
	JB MINEUPROUND
	CMP DL,90
	JA MINEDOWNROUND
	
	JMP BORDERLEFTRIGHT
	
	MINEUPROUND:;处理上边沿
		ADD BX, DX
		INC BYTE PTR [BX-1]
		INC BYTE PTR [BX+1]
		INC BYTE PTR [BX+10]
		INC BYTE PTR [BX+9]
		INC BYTE PTR [BX+11]
	JMP EXITP
	
	MINEDOWNROUND:;处理下边沿
		ADD BX, DX
		INC BYTE PTR [BX-1]
		INC BYTE PTR [BX+1]
		INC BYTE PTR [BX-10]
		INC BYTE PTR [BX-9]
		INC BYTE PTR [BX-11]
	JMP EXITP
	
	;处理左右边沿
	BORDERLEFTRIGHT:
	CMP DL,10
	JZ MINELEFTROUND
	CMP DL,20
	JZ MINELEFTROUND
	CMP DL,30
	JZ MINELEFTROUND
	CMP DL,40
	JZ MINELEFTROUND	
	CMP DL,50
	JZ MINELEFTROUND	
	CMP DL,60
	JZ MINELEFTROUND	
	CMP DL,70
	JZ MINELEFTROUND	
	CMP DL,80
	JZ MINELEFTROUND	
	
	CMP DL, 19
	JZ MINERIGHTROUND
	CMP DL, 29
	JZ MINERIGHTROUND
	CMP DL, 39
	JZ MINERIGHTROUND
	CMP DL, 49
	JZ MINERIGHTROUND
	CMP DL, 59
	JZ MINERIGHTROUND
	CMP DL, 69
	JZ MINERIGHTROUND
	CMP DL, 79
	JZ MINERIGHTROUND
	CMP DL, 89

	JMP MINEROUND
	
	MINELEFTROUND:;处理左边沿
		ADD BX, DX
		INC BYTE PTR [BX-10]
		INC BYTE PTR [BX+10]
		INC BYTE PTR [BX+1]
		INC BYTE PTR [BX-9]
		INC BYTE PTR [BX+11]
	JMP EXITP
	
	MINERIGHTROUND:;处理右边沿
		ADD BX, DX
		INC BYTE PTR [BX-10]
		INC BYTE PTR [BX+10]
		INC BYTE PTR [BX-1]
		INC BYTE PTR [BX+9]
		INC BYTE PTR [BX-11]
	JMP EXITP
	
	MINEROUND:;处理位于中间的格点
		ADD BX, DX
		INC BYTE PTR [BX-1]
		INC BYTE PTR [BX+1]
		INC BYTE PTR [BX-10]
		INC BYTE PTR [BX-9]
		INC BYTE PTR [BX-11]
		INC BYTE PTR [BX+10]
		INC BYTE PTR [BX+9]
		INC BYTE PTR [BX+11]
	JMP EXITP
	
	EXITP:;过程返回		
		POP DX
		POP CX
		POP BX
		POP AX
		RET
SETMINENUM ENDP

;=============================================================
;			过程:ISWIN
;			用途:判断是否取得胜利
;=============================================================
ISWIN PROC
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	
	MOV BX, OFFSET STATE
	MOV DL, BYTE PTR [BX]
	ADD DX, 'A'
	MOV AH, 2H
	INT 21H
	MOV DL,0;计数
	DEC DL
	CMP LEFTMINE, 0
	JZ ISWIN_WIN

	ISWIN_LOOP:
		INC DL
		CMP DL,100
		JZ ISWIN_EXIT
		MOV BX, OFFSET ISMINE
		ADD BL,DL
		CMP BYTE PTR [BX], 0

		JG ISWIN_ISMINE
		JMP ISWIN_LOOP
		
		ISWIN_ISMINE:;在某方格有地雷时判断其状态
			MOV BX,OFFSET STATE
			ADD BL,DL
			CMP BYTE PTR [BX],1;判断该位置是否已设为旗帜
			JNZ ISWIN_LOOP;已设为旗帜则返回循环		
			JMP ISWIN_LOST;游戏失败
	
	ISWIN_WIN:;取得胜利
		MOV GAMESTATE,2;修改游戏状态为2
		PUSH AX
		MOV AL,TIME3;备份游戏用时
		MOV ENDTIME3,AL
		MOV AL,TIME2
		MOV ENDTIME2,AL
		MOV AL,TIME1
		MOV ENDTIME1,AL
		POP AX
		JMP ISWIN_EXIT

	ISWIN_LOST:;游戏失败
		MOV GAMESTATE,1;修改游戏状态为1
		MOV DX, OFFSET MESSOVER
		MOV AH, 09H
		INT 21H
		MOV DL, 0
		MOV SI, OFFSET COTABLE
		MOV BX, OFFSET ISMINE
	IWLL:
		CMP BYTE PTR [BX], 1
		JL IWLL1
		PREPARE_XY
		CALL DRAW_A_BOMB
		JMP IWLL2
	IWLL1:
		ADD SI, 8
	IWLL2:
		INC BX
		INC DL
		CMP DL, 99
		JG ISWIN_END
		JMP IWLL
	
	ISWIN_EXIT:
		POP DX
		POP CX
		POP BX
		POP AX
		RET
		ISWIN_END:
		JMP SAOLEI_END
ISWIN ENDP



WELCOME_SCREEN PROC NEAR
	MOV DX, OFFSET WELCOME
	MOV AH, 09H
	INT 21H
WSIL:
  	MOV AH, 1
  	INT 16H       ;读键盘缓冲区字符
	JZ WSIL
  	MOV AH, 0
  	INT 16H
  	CMP AL, 27   ;读入ESC时返回DOS
  	JZ WELEXIT
  	RET
WELEXIT:
	JMP SAOLEI_END
WELCOME_SCREEN ENDP


FLIP_A_PIECE PROC NEAR
	TUITUI
	MOV BX, OFFSET STATE
	ADD BL, TEMP
	CMP BYTE PTR [BX], 1
	JZ FAP_END
	MOV BYTE PTR [BX], 1
	MOV DL, BYTE PTR [BX]
	ADD DL, 'A'
	MOV AH, 2H
	INT 21H
	MOV DL, TEMP
	ADD DL, 'A'
	INT 21H
	MOV BX, OFFSET ISMINE
	ADD BL, TEMP
	CMP BYTE PTR [BX], 1
	JL FAP0
	CALL DRAW_A_BOMB
	JMP FAP_FAIL
FAP0:
	MOV BX, OFFSET ROUNDMINENUM
	ADD BL, TEMP
	MOV DL, BYTE PTR [BX]
	ADD DL, '0'
	MOV AH, 2H
	INT 21H
	CMP BYTE PTR [BX], 0
	JNZ FAP1
	CALL DRAW_A_ZERO
	JMP FAP_END
FAP1:
	CMP BYTE PTR [BX], 1
	JNZ FAP2
	CALL DRAW_A_ONE
	JMP FAP_END
FAP2:
	CALL DRAW_A_TWO
	JMP FAP_END

FAP_END:
	LALA
	RET
FAP_FAIL:
	LALA
	JMP ISWIN_LOST
FLIP_A_PIECE ENDP

DRAW_A_ZERO PROC NEAR
	MOV COLT, 0FH
	ADD XSC, 6
	SUB XEC, 6
	ADD YSC, 5
	SUB YEC, 5
	CALL DRAW_A_SQR
	MOV COLT, 0CH
	ADD XSC, 4
	SUB XEC, 4
	ADD YSC, 5
	SUB YEC, 5
	CALL DRAW_A_SQR
	RET
DRAW_A_ZERO ENDP

DRAW_A_ONE PROC NEAR
	MOV COLT, 0FH
	ADD XSC, 6
	SUB XEC, 6
	ADD YSC, 5
	SUB YEC, 5
	CALL DRAW_A_SQR
	SUB XEC, 4
	MOV COLT, 0CH
	CALL DRAW_A_SQR
	RET
DRAW_A_ONE ENDP

DRAW_A_TWO PROC NEAR
	MOV COLT, 0FH
	ADD XSC, 6
	SUB XEC, 6
	ADD YSC, 5
	SUB YEC, 5
	CALL DRAW_A_SQR
	MOV COLT, 0CH
	SUB XEC, 4
	ADD YSC, 5
	SUB YEC, 15
	CALL DRAW_A_SQR
	ADD XEC, 4
	ADD XSC, 4
	ADD YSC, 10
	ADD YEC, 10
	CALL DRAW_A_SQR
	RET
DRAW_A_TWO ENDP

DRAW_A_BOMB PROC NEAR
	MOV COLT, 0
	CALL DRAW_A_SQR
	MOV COLT, 0CH
	ADD XSC, 7
	SUB XEC, 7
	ADD YSC, 9
	SUB YEC, 9
	CALL DRAW_A_SQR
	MOV COLT, 0FH
	ADD XSC, 15
	SUB XEC, 4
	ADD YSC, 4
	SUB YEC, 5
	CALL DRAW_A_SQR
	RET
DRAW_A_BOMB ENDP

CODE ENDS
END START

